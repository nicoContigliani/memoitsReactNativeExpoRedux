import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState } from "../store";

// Define the initial state for the auth slice
interface AuthState {
    moduleName: string;
    token: string;
    isLogin: boolean;
    user: object;
    id: string | number;
    message: any;
    httpStatus: any;
}

const initialState: AuthState = {
    moduleName: "moduleStart",
    token: "",
    isLogin: false,
    user: {},
    id: "",
    message: "",
    httpStatus: null
};

// Create an async thunk for fingerprint authentication
export const fingerPrintAuthSlice = createAsyncThunk(
    "auth/fingerPrintAuth",
    async (userData: any) => {
        console.log("ðŸš€ ~ userData:", userData)
        // Perform async logic here (e.g., API calls)
        return userData; // Example: returning userData as is
    }
);

// Create a slice for authentication-related actions
export const authSlice = createSlice({
    name: "fingerPrintAuth",
    initialState,
    reducers: {
        // Example reducer to update login state
        updateLoginState: (state, action: PayloadAction<boolean>) => {
            state.isLogin = action?.payload;
        },
    },
    extraReducers: (builder) => {
        // Handle async thunk actions here
        builder
            .addCase(fingerPrintAuthSlice.fulfilled, (state, action) => {
                // Assuming action.payload contains updated auth state
                // const { isLogin, user, token, id } = action.payload;
                state.isLogin = action?.payload || false;
                // state.user = user || {};
                // state.token = token || "";
                // state.id = id || "";
            });
    },
});

// Export actions from the auth slice
export const { updateLoginState } = authSlice.actions;

// Selector to access the auth state
export const selectAuth = (state: RootState) => state.fingerPrintAuth; // Corregido el nombre del slice

// Export the reducer generated by createSlice for integration into the Redux store
export default authSlice.reducer;